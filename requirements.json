[
    {
        "Name": "Proxy",
        "Type": "PreInstallSoftware",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if you have a proxy active.",
        "OkMessage": "(OK) The proxy isn't active on the Machine.",
        "WarningMessage": "(WARNING) The proxy is active on the Machine. Connection OK.",
        "WarningMessage2": "(WARNING) The proxy is active on the Machine. Connection KO.",
        "DeclineMessage": "return 'You have declined Proxy'",
        "CheckRequirement": "`$ProxyData = Get-ItemProperty -Path 'Registry::HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' | Select-Object 'Proxy*'; if (`$ProxyData.ProxyEnable -eq 1) { `$ProxyDataSplit = `$ProxyData.ProxyServer -split ':'; if (`$ProxyDataSplit.Count -eq 2) { `$ProxyAddress = `$ProxyDataSplit[0]; `$ProxyPort = `$ProxyDataSplit[1] } else { `$ProxyAddress = `$ProxyDataSplit[1].replace('/',''); `$ProxyPort = `$ProxyDataSplit[2]; } if ((Test-NetConnection -ComputerName `$ProxyAddress -Port `$ProxyPort).TcpTestSucceeded) { return @(`$true, 'KO') } else { return @(`$false, 'KO') } } else { return @(`$true, 'OK') }",
        "PostAction": ""
    },
    {
        "Name": "Virtual Machine",
        "Type": "PreInstallSoftware",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if you are running the installer on a Virtual Machine or a Physical Machine.",
        "OkMessage": "(OK) The machine you are running the installer is a Physical Machine.",
        "WarningMessage": "'The machine you are running the installer is a Virtual Machine.`r`nPlease be sure to have executed the command:`r`n`\"Set-VMProcessor -VMName <VMName> -ExposeVirtualizationExtensions `$true`\"`r`non Powershell of your Host Machine as Administrator`r`nRemember to Turn Off your Virtual Machine and to replace the <VMName> with the name of the YOUR Virtual Machine.'",
        "WarningMessage2": "",
        "DeclineMessage": "return 'You have declined Virtual Machine'",
        "CheckRequirement": "`$ComputerModel = (Get-CimInstance win32_computersystem).model; if ((`$ComputerModel -ne 'VMware Virtual Platform') -and (`$ComputerModel -ne 'Virtual Machine') -and (`$ComputerModel -ne 'Macchina Virtuale')) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Proxy npm",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "npm",
            "Proxy"
        ],
        "QuestionMessage": "Press 'Accept' to check if there is a need to configure npm for proxy.",
        "ExtraMessage": "",
        "PostInstallMessage": "return 'PostInstallMessage'",
        "PostInstallCompleteMessage": "return 'PostInstallCompleteMessage'",
        "PostInstallTrueOkMessage": "return 'The proxy is not active (npm).'",
        "PostInstallTrueOkCommand": "`$NpmrcFilePath = `\"$HOME\\.npmrc`\"; if (Test-Path `$NpmrcFilePath) { Get-Content `$NpmrcFilePath | Out-File `\"`$NpmrcFilePath.old.$CurrentDate`\"; Start-Process powershell.exe -ArgumentList `\"npm config delete proxy`\" -WindowStyle hidden -Wait; Start-Process powershell.exe -ArgumentList `\"npm config delete https-proxy`\" -WindowStyle hidden -Wait; Start-Process powershell.exe -ArgumentList `\"npm config delete cafile`\" -WindowStyle hidden -Wait }",
        "DeclineMessage": "return `\"You have declined to automatically set your proxy for npm.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "`$InternetSettings = (Get-ItemProperty -Path 'Registry::HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings'); `$ProxyServer = (`$InternetSettings.ProxyServer); Start-Process powershell.exe -ArgumentList `\"npm config set proxy `$ProxyServer`\" -WindowStyle hidden -Wait; Start-Process powershell.exe -ArgumentList `\"npm config set https-proxy `$ProxyServer`\" -WindowStyle hidden -Wait;",
        "Attributes": [  ],
        "CheckRequirement": "`$InternetSettings = (Get-ItemProperty -Path 'Registry::HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings'); `$ProxyDataSplit = `$InternetSettings.ProxyServer -split ':'; if (`$ProxyDataSplit.Count -eq 2) { `$ProxyAddress = `$ProxyDataSplit[0]; `$ProxyPort = `$ProxyDataSplit[1] } elseif (`$ProxyDataSplit.Count -eq 3) { `$ProxyAddress = `$ProxyDataSplit[1].replace('/',''); `$ProxyPort = $`ProxyDataSplit[2] }; if (`$InternetSettings.ProxyEnable -eq 0) { return @(`$true, 'OK') } elseif ((Test-NetConnection -ComputerName `$ProxyAddress -Port `$ProxyPort).TcpTestSucceeded) { return @(`$true, 'KO') } else { return @(`$false, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Proxy Docker",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "Docker",
            "Proxy"
        ],
        "QuestionMessage": "Press 'Accept' to check if there is a need to configure docker for proxy.",
        "ExtraMessage": "",
        "PostInstallMessage": "return 'PostInstallMessage'",
        "PostInstallCompleteMessage": "return 'PostInstallCompleteMessage'",
        "PostInstallTrueOkMessage": "return 'The proxy is not active (Docker).'",
        "PostInstallTrueOkCommand": "`$DockerConfigPath = `\"$HOME\\.docker\\config.json`\"; if (Test-Path `$DockerConfigPath) { `$DockerConfigJson = Get-Content `$DockerConfigPath; `$DockerConfigJson | Out-File `\"`$DockerConfigPath.old.$CurrentDate`\"; `$DockerConfigObj = `$DockerConfigJson | ConvertFrom-Json; `$DockerConfigObj.PSObject.Properties.Remove('proxies'); Set-Content -Path `$DockerConfigPath -Value (`$DockerConfigObj | ConvertTo-Json -Depth 5) }",
        "DeclineMessage": "return `\"You have declined to automatically set your proxy for Docker.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "`$InternetSettings = (Get-ItemProperty -Path `\"Registry::HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings`\"); `$ProxyServer = (`$InternetSettings.ProxyServer); `$DockerConfigPath = `\"$HOME\\.docker\\config.json`\"; if (Test-Path `$DockerConfigPath) { `$DockerConfigJson = Get-Content `$DockerConfigPath; if (-not [String]::IsNullOrWhiteSpace(`$DockerConfigJson)) { `$DockerConfigJson | Out-File `\"`$DockerConfigPath.old.$CurrentDate`\" } else { New-Item -Path `\"`$DockerConfigPath.old.$CurrentDate`\" } `$DockerConfigObj = `$DockerConfigJson | ConvertFrom-Json; `$DockerConfigObj.PSObject.Properties.Remove('proxies'); `$Proxies = @{ 'defalut' = @{ 'httpProxy'  = `$InternetSettings.ProxyServer; 'httpsProxy' = `$InternetSettings.ProxyServer } }; `$DockerConfigObj | Add-Member -NotePropertyName proxies -NotePropertyValue `$Proxies -Force; Set-Content -Path `$DockerConfigPath -Value (`$DockerConfigObj | ConvertTo-Json -Depth 5) }",
        "Attributes": [  ],
        "CheckRequirement": "`$InternetSettings = (Get-ItemProperty -Path 'Registry::HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings'); `$ProxyDataSplit = `$InternetSettings.ProxyServer -split ':'; if (`$ProxyDataSplit.Count -eq 2) { `$ProxyAddress = `$ProxyDataSplit[0]; `$ProxyPort = `$ProxyDataSplit[1] } elseif (`$ProxyDataSplit.Count -eq 3) { `$ProxyAddress = `$ProxyDataSplit[1].replace('/',''); `$ProxyPort = $`ProxyDataSplit[2] }; if (`$InternetSettings.ProxyEnable -eq 0) { return @(`$true, 'OK') } elseif ((Test-NetConnection -ComputerName `$ProxyAddress -Port `$ProxyPort).TcpTestSucceeded) { return @(`$true, 'KO') } else { return @(`$false, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "WSL Version",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "Wsl Update"
        ],
        "QuestionMessage": "Press 'Accept' to set the default version of WSL to 2.",
        "ExtraMessage": "",
        "PostInstallMessage": "return 'Setting wsl version 2...'",
        "PostInstallCompleteMessage": "return 'Set of wsl version 2 complete.'",
        "PostInstallTrueOkMessage": "return 'Default wsl version already setted to 2.'",
        "PostInstallTrueOkCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically set your default WSL Version.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "wsl --set-default-version 2",
        "Attributes": [  ],
        "CheckRequirement": "`$WslStatus = (wsl --status); `$WslStatusSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslStatus))).split(' '); `$WslVersionResult = `$false; foreach (`$item in `$WslStatusSplit) { if (`$item -eq '2') { `$WslVersionResult = `$true } }; if (`$WslVersionResult) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "WSL Distribution",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "Docker"
        ],
        "QuestionMessage": "Press 'Accept' to change the default Linux Distribution of WSL.",
        "ExtraMessage": "",
        "PostInstallMessage": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); foreach(`$item in `$WslLVSplit) { if(`$item -like '*Ubuntu*') { `$UbuntuDistro = `$item } }; return `\"Setting wsl distribution to `$UbuntuDistro...`\"",
        "PostInstallCompleteMessage": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); foreach(`$item in `$WslLVSplit) { if(`$item -like '*Ubuntu*') { `$UbuntuDistro = `$item } }; return `\"Set wsl distribution to `$UbuntuDistro complete.`\"",
        "PostInstallTrueOkMessage": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); foreach(`$item in `$WslLVSplit) { if(`$item -like '*Ubuntu*') { `$UbuntuDistro = `$item } }; return `\"Wsl distribution already setted to `$UbuntuDistro.`\"",
        "PostInstallTrueOkCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically set your default WSL Distribution.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); foreach(`$item in `$WslLVSplit) { if(`$item -like '*Ubuntu*') { `$UbuntuDistro = `$item } }; wsl --set-default `$UbuntuDistro",
        "Attributes": [  ],
        "CheckRequirement": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); `$DefaultDistroIndex = `$WslLVSplit.IndexOf('*') + 1; if (`$DefaultDistroIndex) { if (`$WslLVSplit[`$DefaultDistroIndex] -like '*Ubuntu*') { return @(`$true, 'OK') } else { return @(`$true, 'KO') } } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "VS Code Settings",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "Visual Studio Code"
        ],
        "QuestionMessage": "Press 'Accept' to set the default integrated terminal to 'Command Prompt' and update mode to 'Manual' for Visual Studio Code.",
        "ExtraMessage": "",
        "PostInstallMessage": "return `\"Updating Visual Studio Code Settings:``r``n- Default Integrated Terminal: Command Prompt``r``n- Update Mode: Manual...`\"",
        "PostInstallCompleteMessage": "return 'Update of Visual Studio Code Settings complete.'",
        "PostInstallTrueOkMessage": "",
        "PostInstallTrueOkCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically Update Visual Studio Code Settings.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "`$VSCodeSettingsJsonPath = `\"`$HOME\\AppData\\Roaming\\Code\\User\\settings.json`\"; if (-not (Get-Content `$VSCodeSettingsJsonPath)) { Set-Content -Path `$VSCodeSettingsJsonPath -Value '{ }' }; `$VSCodeSettingObj = Get-Content `$VSCodeSettingsJsonPath | ConvertFrom-Json; `$VSCodeSettingObj = `$VSCodeSettingObj | Select-Object * -ExcludeProperty 'terminal.integrated.shell.windows', 'terminal.integrated.defaultProfile.windows', 'terminal.integrated.shellArgs.windows', 'terminal.integrated.profiles.windows'; `$VSCodeSettingObj | Add-Member -NotePropertyName 'terminal.integrated.shell.windows' -NotePropertyValue 'C:\\WINDOWS\\System32\\cmd.exe' -Force; `$VSCodeSettingObj | Add-Member -NotePropertyName 'update.mode' -NotePropertyValue 'manual' -Force; `$VSCodeSettingObj.PsObject.Properties.Remove('*'); Set-Content -Path `$VSCodeSettingsJsonPath -Value (`$VSCodeSettingObj | ConvertTo-Json -Depth 5)",
        "Attributes": [
            
        ],
        "CheckRequirement": "`$VSCodeSettingsPath = `\"`$HOME\\AppData\\Roaming\\Code\\User`\"; `$VSCodeSettingsJsonPath = `\"`$HOME\\AppData\\Roaming\\Code\\User\\settings.json`\"; if (Test-Path `$VSCodeSettingsPath) { if (-not (Test-Path `$VSCodeSettingsJsonPath)) { New-Item -Path `$VSCodeSettingsJsonPath -Value '{ }' -Force | Out-Null; return @(`$true, 'KO') } else { `$SettingsContent = Get-Content -Path `$VSCodeSettingsJsonPath | ConvertFrom-Json; if ((`$SettingsContent.'terminal.integrated.defaultProfile.windows' -ne `$null) -or (`$SettingsContent.'terminal.integrated.shellArgs.windows' -ne `$null) -or (`$SettingsContent.'terminal.integrated.profiles.windows' -ne `$null)) { return @(`$true, 'KO') } elseif ((`$SettingsContent.'terminal.integrated.shell.windows' -eq 'C:\\WINDOWS\\System32\\cmd.exe') -and (`$SettingsContent.'update.mode' -eq 'manual')) { return @(`$true, 'OK') } else { return @(`$true, 'KO') } } } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "VS Code Extentions",
        "Type": "PostInstallSoftware",
        "Dependencies": [
            "Visual Studio Code"
        ],
        "QuestionMessage": "Press 'Accept' to install the recommended extentions for Visual Studio Code",
        "ExtraMessage": "",
        "PostInstallMessage": "Installing Visual Studio Code Extentions...",
        "PostInstallCompleteMessage": "Install of Visual Studio Code Extensions complete.",
        "PostInstallTrueOkMessage": "",
        "PostInstallTrueOkCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically Install Visual Studio Code Extensions.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "PostInstallCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; try { Start-Process code -ArgumentList `\"--install-extension $item --force`\" -WindowStyle hidden -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait } catch { return @(`$false, 'KO') }",
        "Attributes": [
            "Mikael.Angular-BeastCode",
            "steoates.autoimport",
            "HookyQR.beautify",
            "donjayamanne.githistory",
            "christian-kohler.path-intellisense",
            "vscode-icons-team.vscode-icons",
            "redhat.vscode-yaml",
            "ms-vscode.vscode-typescript-tslint-plugin",
            "msjsdiag.debugger-for-chrome",
            "spmeesseman.vscode-taskexplorer",
            "Gruntfuggly.triggertaskonsave",
            "Angular.ng-template"
        ],
        "CheckRequirement": "`$NotInstalled = `$false; try { `$InstalledVSCodeExtensions = (code --list-extensions); foreach (`$Extension in `\"$($Requirement.Attributes)`\".Split(' ')) { if ((`$InstalledVSCodeExtensions -like (`\"`$Extension*`\").ToLower()).Count -eq 0) { `$NotInstalled = `$true } } } catch { return @(`$true, 'KO') }; if (`$NotInstalled) { return @(`$true, 'KO') } else { return @(`$true, 'OK') }",
        "PostAction": ""
    },
    {
        "Name": "Administrator",
        "Type": "Permission",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if you have Administrator permission.",
        "OkMessage": "You have the $($Requirement.Name) permission.",
        "KoMessage": "You don't have the $($Requirement.Name) permission.",
        "DeclineMessage": "return 'You have declined Administrator Permission'",
        "CheckRequirement": "`$WhoAmI = `\"$(whoami)`\"; `$WhoAmILower = `$WhoAmI.ToLower(); `$ResultPermission = `$false; `$ListAdministrators = (net localgroup Administrators); `$temp = @(); foreach (`$item in `$ListAdministrators) { if ((`$item -match '\\S') -and (`$item -ne 'Administrator') -and (`$item -ne 'user1') -and (`$item -ne 'user2')) { `$temp += `$item } }; `$ListAdministrators = `$temp | Select-Object -Skip 4 | Select-Object -SkipLast 1; foreach(`$item in `$ListAdministrators) { if(`$item.ToLower() -like `\"*`$WhoAmILower`\") { `$ResultPermission = `$true } }; if (`$ResultPermission) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Environement Variable Path",
        "Type": "Env Variable",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to add the missing Environement Variable Path.",
        "Variable": "Path",
        "Values": [
            "C:\\windows\\system32",
            "C:\\windows\\system32\\wbem",
            "C:\\windows",
            "C:\\windows\\system32\\windowspowershell\\v1.0"
        ],
        "Scope": "Machine",
        "AddCommand": "[System.Environment]::SetEnvironmentVariable(`\"$($Requirement.Variable)`\", `\"$env:Path;`\"+`\"$item`\", `\"$($Requirement.Scope)`\")",
        "DeclineMessage": "return `\"You have declined to automatically set your Environement Variable Path.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$EnvValues = (`\"$($Requirement.Values)`\").Split(' '); `$NotFound = `$false; `$envPath = `\"`$env:PATH`\"; foreach (`$Value in `$EnvValues) { if(((`$envPath.ToLower()).Split(';') -notcontains (`\"`$Value`\").ToLower()) -and ((`$envPath.ToLower()).Split(';') -notcontains (`\"`$Value\\`\").ToLower())) { `$NotFound = `$true } }; if (`$NotFound) { return @(`$true, 'KO') } else { return @(`$true, 'OK') }",
        "PostAction": ""
    },
    {
        "Name": "Windows Subsystem Linux",
        "Type": "Feature",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to enable the Windows feature 'Windows Subsystem for Linux'.",
        "ExtraMessage": "",
        "EnableCommand": "& dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart",
        "DeclineMessage": "return `\"You have declined to automatically enable the Windows feature 'Windows Subsystem Linux'.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$Result = `$true; `$WslFeature = dism /online /get-featureinfo /featurename:Microsoft-Windows-Subsystem-Linux; foreach (`$Item in `$WslFeature) { if ((`$Item -like '*Disabled*') -or (`$Item -like '*Disattivata*')) { `$Result = `$false } }; if (`$Result) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": "Restart"
    },
    {
        "Name": "Virtual Machine Platform",
        "Type": "Feature",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to enable the Windows feature 'Virtual Machine Platform'",
        "ExtraMessage": "",
        "EnableCommand": "& dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart",
        "DeclineMessage": "return `\"You have declined to automatically enable the Windows feature 'Virtual Machine Platform'.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$Result = `$true; `$VmpFeature = dism /online /get-featureinfo /featurename:VirtualMachinePlatform; foreach (`$Item in `$VmpFeature) { if ((`$Item -like '*Disabled*') -or (`$Item -like '*Disattivata*')) { `$Result = `$false } }; if (`$Result) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": "Restart"
    },
    {
        "Name": "Setup CaTools.msi",
        "Type": "Software",
        "Dependencies": [
            "WSL Distribution"
        ],
        "QuestionMessage": "Press 'Accept' to download and install the Ca-Tools.msi.",
        "MinVersion": "1.12.0",
        "MaxVersion": "latest",
        "DownloadLink": "https://api.github.com/repos/codearchitects/Ca-Tools/releases/$($Requirement.MaxVersion)",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-Setup-CaTools.msi",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod (((Invoke-RestMethod $($Requirement.DownloadLink)).assets[0]).browser_download_url) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('/I', `\"$($Requirement.DownloadOutfile)`\", '/passive')",
        "InstallCommand": "```$NameNoSpaces = (```\"$($Requirement.Name)```\".replace(' ', '')); ```$Logfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.log```\"; ```$OutLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.out```\"; ```$ErrLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.err```\"; Start-Process msiexec.exe -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput ```$OutLogfile -RedirectStandardError ```$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install Ca-Tools.msi.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "if(Test-Path ```\"$($Requirement.DownloadOutfile)```\") { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": "Reinstall"
    },
    {
        "Name": "Git",
        "Type": "Software",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to download and install Git.",
        "MinVersion": "2.27.0",
        "MaxVersion": "2.34.0",
        "DownloadLink": "https://github.com/git-for-windows/git/releases/download/v$($Requirement.MaxVersion).windows.1/Git-$($Requirement.MaxVersion)-64-bit.exe",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-Git-x64.exe",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('/VERYSILENT')",
        "InstallCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Start-Process $($Requirement.DownloadOutfile) -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install Git.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$GitVersion = (git --version).replace('git version', '').replace('.windows.1', '').Trim(); if ((`$GitVersion -ge `\"$($Requirement.MinVersion)`\") -and (`$GitVersion -le `\"$($Requirement.MaxVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Node.js",
        "Type": "Software",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to download and install Node.js.",
        "MinVersion": "14.0.0",
        "MaxVersion": "16.13.1",
        "DownloadLink": "https://nodejs.org/dist/v$($Requirement.MaxVersion)/node-v$($Requirement.MaxVersion)-x64.msi",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-Nodejs-x64.msi",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('/I', `\"$($Requirement.DownloadOutfile)`\", '/passive')",
        "InstallCommand": "```$NameNoSpaces = (```\"$($Requirement.Name)```\".replace(' ', '')); ```$Logfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.log```\"; ```$OutLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.out```\"; ```$ErrLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.err```\"; Start-Process msiexec.exe -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput ```$OutLogfile -RedirectStandardError ```$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install Node.js.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$NodeJsVersion = (node --version).replace('v',''); if ((`$NodeJsVersion -ge `\"$($Requirement.MinVersion)`\") -and (`$NodeJsVersion -le `\"$($Requirement.MaxVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Visual Studio",
        "Type": "Software",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to download and install Visual Studio.",
        "MinVersion": "16",
        "MaxVersion": "17",
        "DownloadLink": "https://aka.ms/vs/17/release/vs_community.exe",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-VisualStudio-$($Requirement.MaxVersion).exe",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('--add Microsoft.VisualStudio.Workload.NetWeb', '--add Microsoft.VisualStudio.Workload.CoreEditor', '--add Microsoft.VisualStudio.Workload.ManagedDesktop', '--add Microsoft.VisualStudio.Workload.Universal', '--add Microsoft.NetCore.Component.Runtime.5.0', '--add Microsoft.NetCore.Component.Runtime.3.1', '--passive', '--norestart')",
        "InstallCommand": "```$NameNoSpaces = (```\"$($Requirement.Name)```\".replace(' ', '')); ```$Logfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.log```\"; ```$OutLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.out```\"; ```$ErrLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.err```\"; Start-Process $($Requirement.DownloadOutfile) -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput ```$OutLogfile -RedirectStandardError ```$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install Visual Studio.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { [version[]]`$VSVersions = &'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -property catalog_productDisplayVersion; `$VSVersion = (`$VSVersions | Sort-Object -Descending)[0]; if ((`$VSVersion.Major -ge `\"$($Requirement.MinVersion)`\") -and (`$VSVersion.Major -le `\"$($Requirement.MaxVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Visual Studio Code",
        "Type": "Software",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to download and install Visual Studio Code.",
        "MinVersion": "1.60.0",
        "MaxVersion": "1.62.3",
        "DownloadLink": "https://update.code.visualstudio.com/$($Requirement.MaxVersion)/win32-x64-user/stable",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-VSCode-User-x64.exe",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('/VERYSILENT', '/NORESTART', '/mergetasks=!runcode')",
        "InstallCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Start-Process $($Requirement.DownloadOutfile) -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait; `$env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User'); code; `$CodeProcesses = (Get-Process Code -ErrorAction SilentlyContinue); if (`$CodeProcesses) { foreach (`$CodeProcess in `$CodeProcesses) { `$CodeProcess.CloseMainWindow() } };",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile); ",
        "DeclineMessage": "return `\"You have declined to automatically download and install Visual Studio Code.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$VSCodeVersion = (code --version)[0]; if (`$VSCodeVersion -ge `\"$($Requirement.MinVersion)`\") { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "DotNet Core",
        "Type": "Software",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to download and install .NET Core.",
        "MinVersion": "3.1.0",
        "MaxVersion": "6.0.101",
        "DownloadLink": "https://download.visualstudio.microsoft.com/download/pr/343dc654-80b0-4f2d-b172-8536ba8ef63b/93cc3ab526c198e567f75169d9184d57/dotnet-sdk-6.0.101-win-x64.exe",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-Dotnet-x64.exe",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('/q', '/norestart')",
        "InstallCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Start-Process $($Requirement.DownloadOutfile) -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install .NET Core.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$DotNetVersion = dotnet --version; if ((`$DotNetVersion -ge `\"$($Requirement.MinVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Docker",
        "Type": "Software",
        "Dependencies": [
            "Virtual Machine Platform",
            "Wsl Version",
            "Linux Distribution"
        ],
        "QuestionMessage": "Press 'Accept' to download and install Docker Desktop.",
        "MinVersion": "20.0.0",
        "MaxVersion": "20.10.8",
        "DownloadLink": "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe",
        "DownloadOutfile": "$HOME\\Downloads\\$RandomCode-Docker-x64.exe",
        "ExtraMessage": "",
        "DownloadCommand": "Invoke-RestMethod $($Requirement.DownloadLink) -OutFile $($Requirement.DownloadOutfile)",
        "ArgumentList": "@('install', '--quiet')",
        "InstallCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Start-Process $($Requirement.DownloadOutfile) -ArgumentList $($Requirement.ArgumentList) -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait",
        "DeleteCommand": "Remove-Item $($Requirement.DownloadOutfile)",
        "DeclineMessage": "return `\"You have declined to automatically download and install Docker.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$DockerVersion = (docker --version).replace(',', '').replace('Docker version', '').replace('build', '').Trim().Split(' ')[0]; if ((`$DockerVersion -ge `\"$($Requirement.MinVersion)`\") -and (`$DockerVersion -le `\"$($Requirement.MaxVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": "Logout"
    },
    {
        "Name": "npm",
        "Type": "Software",
        "Dependencies": [
            "Node.js"
        ],
        "QuestionMessage": "Press 'Accept' to update the version of npm.",
        "MinVersion": "6.0.0",
        "MaxVersion": "6.14.16",
        "DownloadLink": "",
        "DownloadOutfile": "",
        "ExtraMessage": "",
        "DownloadCommand": "",
        "ArgumentList": "@('i', '-g', `\"npm@$($Requirement.MaxVersion)`\")",
        "InstallCommand": "```$NameNoSpaces = (```\"$($Requirement.Name)```\".replace(' ', '')); ```$Logfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.log```\"; ```$OutLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.out```\"; ```$ErrLogfile = ```\"$HOME\\.ca\\$RandomCode-```$NameNoSpaces-$CurrentDate.err```\"; Start-Process npm -ArgumentList $($Requirement.ArgumentList) -WindowStyle hidden -RedirectStandardOutput ```$OutLogfile -RedirectStandardError ```$ErrLogfile -Wait",
        "DeleteCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically update the version of npm.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "try { `$NpmVersion = npm --version; if ((`$NpmVersion -ge `\"$($Requirement.MinVersion)`\") -and (`$NpmVersion -le `\"$($Requirement.MaxVersion)`\")) { return @(`$true, 'OK') } else { return @(`$true, 'VER') } } catch { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Wsl Update",
        "Type": "Software",
        "Dependencies": [
            "Windows Subsystem Linux"
        ],
        "QuestionMessage": "Press 'Accept' to update the Linux kernel package.",
        "MinVersion": "",
        "MaxVersion": "",
        "DownloadLink": "",
        "DownloadOutfile": "",
        "ExtraMessage": "",
        "DownloadCommand": "",
        "ArgumentList": "",
        "InstallCommand": "wsl --update",
        "DeleteCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically download and install Wsl Update.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$WslStatus = (wsl --status); `$WslStatusSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslStatus))).split(' '); `$Result = `$false; for (`$i = 0; `$i -lt `$WslStatusSplit.Count; `$i++) { if (`$WslStatusSplit[`$i] -like 'Kernel') { `$j = `$i + 1; if (`$WslStatusSplit[`$j] -like '*version*') { `$Result = `$true } } elseif (`$WslStatusSplit[`$i] -like 'Versione') { `$j = `$i + 1; `$k = `$j + 1;  if ((`$WslStatusSplit[`$j] -like 'del') -and  (`$WslStatusSplit[`$k] -like '*kernel*')) { `$Result = `$true } } };  if (`$Result) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Linux Distribution",
        "Type": "Software",
        "Dependencies": [
            "Windows Subsystem Linux"
        ],
        "QuestionMessage": "Press 'Accept' to download and install the Linux Distribution: 'Ubuntu'.",
        "MinVersion": "18.04",
        "MaxVersion": "20.04",
        "DownloadLink": "",
        "DownloadOutfile": "",
        "ExtraMessage": "Ubuntu",
        "DownloadCommand": "",
        "ArgumentList": "",
        "InstallCommand": "wsl --install -d Ubuntu-$($Requirement.MaxVersion)",
        "DeleteCommand": "",
        "DeclineMessage": "return `\"You have declined to automatically download and install Linux Distriution (Ubuntu 20.04 LTS).`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$WslLV = (wsl -l -v); `$WslLVSplit = ([System.Text.Encoding]::Unicode.GetString([System.Text.Encoding]::Default.GetBytes(`$WslLV))).split(' '); `$Result = `$false; for (`$i = 0; `$i -lt `$WslLVSplit.Count; `$i++) { if ((`$WslLVSplit[`$i] -like `\"*Ubuntu-$($Requirement.MaxVersion)*`\") -or (`$WslLVSplit[`$i] -like `\"*Ubuntu-$($Requirement.MinVersion)*`\")) { `$Result = `$true } }; if (`$Result) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Registry npm",
        "Type": "Connection",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if the npm registry (https://registry.npmjs.org) is reachable.",
        "OkMessage": "$($Requirement.Name) is reachable.",
        "KoMessage": "$($Requirement.Name) is unreachable with HTTPS protocol.",
        "TcpMessage": "$($Requirement.Name) is unreachable with TCP protocol.",
        "DeclineMessage": "return 'You have declined Registry npm Connection'",
        "CheckRequirement": "try {`$npmRegistryAvailable = (Invoke-WebRequest -Uri https://registry.npmjs.org -UseBasicParsing -DisableKeepAlive).StatusCode; if (`$npmRegistryAvailable -eq 200) { return @(`$true, 'OK') } else { return @(`$false, 'KO') } } catch { return @(`$false, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Registry NuGet",
        "Type": "Connection",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if the NuGet registry (https://api.nuget.org/v3/index.json) is reachable.",
        "OkMessage": "$($Requirement.Name) is reachable.",
        "KoMessage": "$($Requirement.Name) is unreachable with HTTPS protocol.",
        "TcpMessage": "$($Requirement.Name) is unreachable with TCP protocol.",
        "DeclineMessage": "return 'You have declined Registry Nuget Connection'",
        "CheckRequirement": "try {`$nugetRegistryAvailable = (Invoke-WebRequest -Uri https://api.nuget.org/v3/index.json -UseBasicParsing -DisableKeepAlive).StatusCode; if (`$nugetRegistryAvailable -eq 200) { return @(`$true, 'OK') } else { return @(`$false, 'KO') } } catch { return @(`$false, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Azure DevOps",
        "Type": "Connection",
        "Dependencies": [  ],
        "QuestionMessage": "Press 'Accept' to check if Azure DevOps Server (https://devops.codearchitects.com:444/) is reachable.",
        "OkMessage": "$($Requirement.Name) is reachable.",
        "KoMessage": "$($Requirement.Name) is unreachable with HTTPS protocol.",
        "TcpMessage": "$($Requirement.Name) is unreachable with TCP protocol.",
        "DeclineMessage": "return 'You have declined Azure DevOps Connection'",
        "CheckRequirement": "`$azureDevOpsAvailable = (Test-NetConnection devops.codearchitects.com -port 444).TcpTestSucceeded; if (`$azureDevOpsAvailable) { try { Invoke-WebRequest -Uri https://devops.codearchitects.com:444/ -UseBasicParsing -DisableKeepAlive } catch { `$status = `$_.Exception.Response.StatusCode.value__ } if (`$status -eq 401) { return @(`$true, 'OK') } else { return @(`$false, 'KO') } }  else { return @(`$false, 'TCP') }",
        "PostAction": ""
    },
    {
        "Name": "Npm Login",
        "Type": "Activity",
        "Dependencies": [
            "Setup CaTools.msi"
        ],
        "QuestionMessage": "Press 'Accept' to check if there is an account npm.",
        "PathFile": "powershell.exe",
        "ArgumentList": "npm view @ca/cli",
        "ActivityOKCommand": "`$Description.Text = 'I have found an Azure DevOps account, do you want to login with it?'; `$TokenPath = `\"~/.token.json`\"; `$TokenParsed = Get-Content `$TokenPath | ConvertFrom-Json; `$Index = `$TokenParsed.Count - 1; `$UsernameTextBox.Text = `$TokenParsed[`$Index].user; `$TokenTextBox.Text = `$TokenParsed[`$Index].token; Show-LoginNpmScreen",
        "ActivityKOCommand": "`$Description.Text = 'We have not found any Azure DevOps account.`r`nPlease enter the Azure DevOps Username and the Token'; Show-LoginNpmScreen",
        "DeclineMessage": "return `\"You have declined to automatically login to npm.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "`$NpmLoginNoSpace = `\"$($Requirement.Name)`\".replace(' ', ''); `$NpmLogfile = `\"$HOME\\.ca\\$RandomCode-`$NpmLoginNoSpace-$CurrentDate.log`\"; `$NpmOutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NpmLoginNoSpace-$CurrentDate.out`\"; `$NpmErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NpmLoginNoSpace-$CurrentDate.err`\"; Start-Process $($Requirement.PathFile) -ArgumentList `\"$($Requirement.ArgumentList)`\" -WindowStyle hidden -RedirectStandardOutput `$NpmOutLogfile -RedirectStandardError `$NpmErrLogfile -Wait; Get-Content `$NpmOutLogfile, `$NpmErrLogfile | Set-Content `$NpmLogfile; Start-Process $($Requirement.PathFile) -ArgumentList 'npm view @ca-codegen/core' -WindowStyle hidden -RedirectStandardOutput `$NpmOutLogfile -RedirectStandardError `$NpmErrLogfile -Wait; Get-Content `$NpmOutLogfile, `$NpmErrLogfile | Add-Content `$NpmLogfile; `$NpmLoginLogfile = Get-Content `$NpmLogfile; `$ErrorsNpm = 0; foreach (`$Item in `$NpmLoginLogfile) { if ((`$Item -like '*ERR!*') -or (`$Item -like '*error*')) { `$ErrorsNpm++ } }; if ((`$ErrorsNpm -eq 0)) { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": "Login"
    },
    {
        "Name": "Install CAEP",
        "Type": "Activity",
        "Dependencies": [
            "Npm Login"
        ],
        "QuestionMessage": "Press 'Accept' to install the Code Architects Enterprise Platform (CAEP)",
        "PathFile": "C:\\Program Files\\Ca-Tools\\setup-ca-platform.exe",
        "ArgumentList": "-s",
        "ActivityOKCommand": "",
        "ActivityKOCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Start-Process `\"$($Requirement.PathFile)`\" -ArgumentList $($Requirement.ArgumentList) -WindowStyle hidden -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait; `$LogfileContent = Get-Content `$Logfile; foreach (`$Item in `$LogfileContent) { if ((`$Item -like '*Error*') -or (`$Item -like '*ERR!*')) { `$ArrayErrors += `$Item } }; if (`$ArrayErrors.Count -ne 0) { foreach (`$Item in `$ArrayErrors) { if (`$Item -like '*tunneling socket could not be established*') { `$CertPem += `$Item } }; if (`$CertPem.Count -ne 0) { New-Item -Path 'C:\\cacert' -ItemType Directory -Force; `$Description.Text += '`r`n`r`nYou have a HTTPS Proxy active!`r`nTo continue the installation of CAEP add the certificate .pem in the folder C:\\cacert.`r`nFor more information about the certificate .pem ask your System Administrator.' } else { `$Description.Text += '`r`nERRORS FOUND:'; foreach (`$Item in `$ArrayErrors) { `$Description.Text += `\"`r`n`$Item`\" }; `$Description.Text += '`r`nCheck the full logfile in the path $FullLogfile' }; Show-Buttons `@('$DoneButton') } else { `$Description.Text += '`r`nSetupPlatformExe executed correctly' }",
        "DeclineMessage": "return `\"You have declined to automatically install CAEP.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "return @(`$true, 'KO')",
        "PostAction": ""
    },
    {
        "Name": "Generate Scarface Config",
        "Type": "Activity",
        "Dependencies": [
            "Install CAEP"
        ],
        "QuestionMessage": "Press 'Accept' to download the scarface.config.json.",
        "PathFile": "C:\\dev\\scarface\\scarface.config.json",
        "ArgumentList": "",
        "ActivityOKCommand": "",
        "ActivityKOCommand": "New-Item -Path $($Requirement.PathFile) -Force; `$ScarConfigObj = (Invoke-WebRequest -Uri `$ScarConfig -UseBasicParsing).Content | ConvertFrom-Json; `$MaxDate = 0; `$TokenPath = `\"~/.token.json`\"; `$TokenList = Get-Content `$TokenPath | ConvertFrom-Json; foreach(`$t in `$TokenList) { `$CurrentDate = `$t.date.Replace(`\"-`\", `\"`\"); if (`$MaxDate -lt `$CurrentDate) { `$MaxDate = `$CurrentDate; `$TokenObj = `$t } }; `$ScarConfigObj.token = `$TokenObj.token; `$ScarConfigObj.user = `$TokenObj.user; `$ScarConfigObj | ConvertTo-Json | Set-Content -Path $($Requirement.PathFile)",
        "DeclineMessage": "return `\"You have declined to automatically Generate scarface.config.json.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement":  "if (Test-Path `\"$($Requirement.PathFile)`\") { return @(`$true, 'OK') } else { return @(`$true, 'KO') }",
        "PostAction": ""
    },
    {
        "Name": "Execute ca scar",
        "Type": "Activity",
        "Dependencies": [
            "Generate Scarface Config"
        ],
        "QuestionMessage": "Press 'Accept' to run the command 'ca scar'",
        "PathFile": "$HOME\\AppData\\Roaming\\npm\\ca.cmd",
        "ArgumentList": "scar -c C:\\dev\\scarface\\scarface.config.json",
        "ActivityOKCommand": "",
        "ActivityKOCommand": "`$NameNoSpaces = (`\"$($Requirement.Name)`\".replace(' ', '')); `$Logfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.log`\"; `$OutLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.out`\"; `$ErrLogfile = `\"$HOME\\.ca\\$RandomCode-`$NameNoSpaces-$CurrentDate.err`\"; Set-Location 'C:\\dev\\scarface'; Start-Process `\"$($Requirement.PathFile)`\" -ArgumentList 'scar:setup' -WindowStyle hidden -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile -Wait; Start-Process `\"$($Requirement.PathFile)`\" -ArgumentList `\"$($Requirement.ArgumentList)`\" -WindowStyle hidden -RedirectStandardOutput `$OutLogfile -RedirectStandardError `$ErrLogfile",
        "DeclineMessage": "return `\"You have declined to automatically execute 'ca scar'.`r`nTo continue with the installation check the documentation https://caep.codearchitects.com/docs/framework/caep-code-architects-enterprise-platform/`\"",
        "CheckRequirement": "return @(`$true, 'KO')",
        "PostAction": "End"
    }
]
